<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Webpack脚手架搭建]]></title>
    <url>%2F2019%2F09%2F06%2FWebpack%E8%84%9A%E6%89%8B%E6%9E%B6%E6%90%AD%E5%BB%BA%2F</url>
    <content type="text"><![CDATA[1.了解Webpack相关 什么是webpack Webpack是一个模块打包器(bundler)。 在Webpack看来, 前端的所有资源文件(js/json/css/img/less/…)都会作为模块处理。 它将根据模块的依赖关系进行静态分析，生成对应的静态资源 四个核心概念 Entry：入口起点(entry point)指示 webpack 应该使用哪个模块，来作为构建其内部依赖图的开始。 Output：output 属性告诉 webpack 在哪里输出它所创建的 bundles，以及如何命名这些文件，默认值为 ./dist。 Loader：loader 让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只能解析： JavaScript、json）。 Plugins：插件则可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等。 理解Loader Webpack 本身只能加载JS/JSON模块，如果要加载其他类型的文件(模块)，就需要使用对应的loader 进行转换/加载 Loader 本身也是运行在 node.js 环境中的 JavaScript 模块 它本身是一个函数，接受源文件作为参数，返回转换的结果 loader 一般以 xxx-loader 的方式命名，xxx 代表了这个 loader 要做的转换功能，比如 json-loader。 理解Plugins 插件件可以完成一些loader不能完成的功能。 插件的使用一般是在 webpack 的配置信息 plugins 选项中指定。 CleanWebpackPlugin: 自动清除指定文件夹资源 HtmlWebpackPlugin: 自动生成HTML文件并 UglifyJSPlugin: 压缩js文件 配置文件(默认) webpack.config.js : 是一个node模块，返回一个 json 格式的配置信息对象 2.学习文档 : webpack官网: http://webpack.github.io/ webpack3文档(英文): https://webpack.js.org/ webpack3文档(中文): https://doc.webpack-china.org/ 3.webpack的基本使用 生成package.json文件 安装webpack（都要安装）： npm install webpack@3 -g //全局安装 npm install webpack@3 –save-dev //局部安装 小试牛刀处理一个js执行命令：webpack src/js/index.js build/index.js观察发现webpack会把es6的模块化语法，直接编译为浏览器识别的模块化语法，不过类似于箭头函数等依然存在 4.使用webpack配置文件 webpack的核心配置文件：执行webpack命令时，会在当前目录查找webpack.config.js文件读取配置 1.通过Commonjs暴露出去一个对象 2.四个关键的概念： entry：入口文件，将所有打包资源全部引入 output：输出文件，将资源输出到指定目录下 loader：处理webpack不能够解析的模块 plugins：执行loader做不了的任务 3.如何找到自己想要的loader？ 优先去官网找自己想要的loader，没有再去npm官网上找。 4.在终端输入：webpack ./src/js/app.js ./build/js/built.js 问题：这种方式只能够编译打包js、json文件，其他文件处理不了 5.webpack --display-modules可以查看隐藏的任务 const path = require(&#39;path&#39;); //path内置的模块，用来设置路径。 12345678910module.exports = &#123; //入口（从哪里进入开始解析） entry:&apos;./src/js/index.js&apos;,​ //出口（最终加工完的代码输出到哪里）​ output: &#123;// 输出配置​ path: path.resolve(__dirname, &apos;build&apos;),//输出文件路径配置​ filename: &apos;index.js&apos;,// 输出文件名​ &#125;​ &#125;; 5.在package.json中配置npm命令1234&quot;scripts&quot;: &#123; &quot;build&quot;: &quot;webpack&quot; &#125;,//打包应用运行:npm run build ​ 6.使用loader解析less文件（使用less-loader）12345678910111213141. 安装：npm install --save-dev less-loader less2. 安装：npm install css-loader style-loader --save-D3. 向rules中写入配置： &#123; test: /\.less$/, use: [&#123; loader: &quot;style-loader&quot; // 创建一个style标签，将js中的css放入其中 &#125;, &#123; loader: &quot;css-loader&quot; // 将css以CommonJs语法打包到js中 &#125;, &#123; loader: &quot;less-loader&quot; // 将less转换成css &#125;] &#125;4. 在入口js中引入less文件：import &apos;../less/demo.less&apos;; 7.file-loader处理图片资源1234567891011121314151. 安装：npm install --save-dev file-loader2. 新增loader： &#123; test: /\.(png|jpg|gif)$/, use: [ &#123; loader: &apos;file-loader&apos;, //如果不做图片转base64，可以用file-loader options: &#123; outputPath:&apos;img&apos;, //图片最终输出的位置 publicPath:&apos;../build/img&apos;, //css资源图片路径 name:&apos;[hash:5].[ext]&apos; //修改图片名称 &#125; &#125; ] &#125; 8.url-loader处理图片资源&amp;base6412345678910111213141516171. 安装：npm install --save-dev url-loader2. 修改loader为： &#123; test: /\.(png|jpg|gif)$/, use: [ &#123; loader: &apos;url-loader&apos;, //如果不做图片转base64，可以用file-loader options: &#123; limit: 8192, outputPath:&apos;img&apos;, //图片最终输出的位置 publicPath:&apos;./img&apos;, //css资源图片路径 name:&apos;[hash:5].[ext]&apos; //修改图片名称 &#125; &#125; ] &#125;3. 备注：一定要注意路径的问题 9.使用插件提取css,合并为单独的文件1234567891011121314151. 安装ExtractTextWebpackPluginh插件：npm install --save-dev extract-text-webpack-plugin2. 引入插件：const ExtractTextPlugin = require(&quot;extract-text-webpack-plugin&quot;);3. 新增plugins插件配置项，并实例化ExtractTextPlugin插件： plugins: [ //提取css为单独文件 new ExtractTextPlugin(&quot;./css/index.css&quot;), ]4. 修改原less-loader的配置如下： &#123; test: /\.less$/, //匹配文件的规则，说明该loader对哪个文件生效 use: ExtractTextPlugin.extract(&#123; fallback: &quot;style-loader&quot;, use: [&quot;css-loader&quot;,&quot;less-loader&quot;] &#125;) &#125; 10.js语法检查12345678910111213141516171819202122231. 安装jshint-loader：npm i jshint-loader --save -D2. 新增loader： &#123; test: /\.js$/, // 涵盖 .js 文件 enforce: &quot;pre&quot;, // 预先加载好 jshint loader exclude: /node_modules/, // 排除掉 node_modules 文件夹下的所有文件 use: [ &#123; loader: &quot;jshint-loader&quot;, options: &#123; //jslint 的错误信息在默认情况下会显示为 warning（警告）类信息 //将 emitErrors 参数设置为 true 可使错误显示为 error（错误）类信息 emitErrors: false, //jshint 默认情况下不会打断webpack编译 //如果你想在 jshint 出现错误时，立刻停止编译 //请设置 failOnHint 参数为true failOnHint: false &#125; &#125; ] &#125;3. 备注：有一个小坑，就是仅仅安装jshint-loader还不够，还要安装js-hint,命令：npm i jshint --save -D 11.es6转es5123456789101112131. 安装babel-loader，命令：npm install babel-loader babel-core babel-preset-es2015 --save -D2. 配置新的loader： &#123; test: /\.js$/, exclude: /(node_modules|bower_components)/, use: &#123; loader: &apos;babel-loader&apos;, options: &#123; presets: [&apos;es2015&apos;] &#125; &#125; &#125;3. 坑！提示找不到&quot;@babel/core&quot;，根据提示执行：npm i babel-loader@7 --save -D 12.html文件的处理和清除文件夹12345678910111213141516171. 对于html的操作，虽然有了html-loader这个loader，不过他基本做不了什么，我们的需求是： 想让webpack自动的帮我们创建一个html，然后把我们想要引入的东西引入进来，所以要借助插件。2. 使用插件HtmlWebpackPlugin，安装：npm install --save-dev html-webpack-plugin3. 引入插件：var HtmlWebpackPlugin = require(&apos;html-webpack-plugin&apos;);4. 新增一个插件配置项： new HtmlWebpackPlugin(&#123; title:&quot;webpack&quot;, filename:&quot;index.html&quot;, template:&quot;./src/index.html&quot; &#125;), 备注：要在html模板中写入&lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;，title配置才生效5. 删除掉模板html中的所有引入6. 为了清空工作目录，安装插件：clean-webpack-plugin，命令：npm i clean-webpack-plugin -D7. 引入插件： const CleanWebpackPlugin = require(&apos;clean-webpack-plugin&apos;)8. 实例一个插件： new CleanWebpackPlugin(&apos;./build&apos;)备注：最新版的CleanWebpackPlugin不传任何参数 13.build环境的搭建123456789101112131. 新建文件目录：config2. 移动webpack.config.js文件到config中，改名为：webpack.build.js3. 通过执行：webpack --display-modules --config ./config/webpack.build.js 指定配置文件运行4. 完善一下：在package.json中自定义命令：&quot;build&quot;: &quot;webpack --display-modules --config ./config/webpack.build.js&quot;5. 以后可以通过：npm run build 代替完整命令6. 【问题】：发现build文件夹出现在了config中，解决办法如下： 修改出口output中的path为：resolve(__dirname, &apos;../build&apos;)7. 【问题】：上一步的清空位置发生了改变，解决办法如下： 修改CleanWebpackPlugin插件的配置如下： new CleanWebpackPlugin(&apos;./build&apos;,&#123; root:resolve(__dirname,&apos;../&apos;) &#125;)备注：如果使用的clean-webpack-plugin插件是2.0以上的，则不会出现问题7 14.dev环境的搭建12345678910111213141516171819202122232425261. 复制一份webpack.build.js，改名为：webpack.dev.js2. 安装dev-server：npm i webpack-dev-server@2 -D（下载第2个版本，3版本有兼容性问题）3. 修改package.json的配置：&quot;dev&quot;: &quot;webpack-dev-server --config ./config/webpack.dev.js&quot;4. 在webpack.dev.js中配置dev服务器编： //配置开发服务器 devServer: &#123; hot: true, open:true, port:3001, compress:true &#125; 备注：官网--&gt;配置--&gt;开发中server(devserver)可见详细配置5. 启用HMR（热模替换） 引入webppack：const webpack = require(&apos;webpack&apos;); 追加一个插件：new webpack.HotModuleReplacementPlugin()6. 存在的问题：改了css、html还得手动刷新才可以，解决如下：7. 【 解决css更新问题】因为css用的是插件，不是loader，所以不行，解决办法：重新使用loader的方式。8. 【 解决html更新问题】因为html也是插件，办法：html依然用插件，追加使用loader，安装：npm i html-loader -D，新增html-loader配置项如下： &#123; test: /\.(html)$/, use: &#123; loader: &apos;html-loader&apos;, &#125; &#125; 同时entry重写为:[&apos;./src/js/index.js&apos;,&apos;./src/index.html&apos;] 备注：需要注意的是：dev方式的运行是加载在内存中的，没有任何输出 15.提取公共代码实现复用12345671. 参考webpack.build.js，新增：webpack.common.js2. webpack.common.js中删除所有css的loader，删除CleanWebpackPlugin，删除ExtractTextPlugin插件，删除最上方二者的引用3. 在webpack.build.js上方引入：const common = require(&apos;./webpack.common&apos;)4. 安装合并库：npm i webpack-merge -D，引入merge库：const merge = require(&apos;webpack-merge&apos;)5. module.exports = merge(common,&#123;当前文件所有配置&#125;)6. 剔除webpack.build.js中：入口，出口，图片处理，js语法检查，es6转换，HtmlWebpackPlugin7. 剔除webpack.dev.js中：出口，图片处理，js语法检查，es6转换，插件只保留：HotModuleReplacementPlugin 16.prod环境配置12345678910111213141516171819202122232425262728293031323334353637383940414243* 复制webpack.build.js，改名：webpack.prod.js* package.json中追加：&quot;prod&quot;: &quot;webpack --display-modules --config ./config/webpack.prod.js&quot;,* pro模式输出的文件在dist文件夹中，修改出口配置：path: resolve(__dirname, &apos;../dist&apos;),filename: &apos;./js/[name].[hash:10].js&apos;* 修改css插件配置：new ExtractTextPlugin(&quot;./css/[name].[hash:10].css&quot;), 【压缩js】* 使用插件（用于压缩js文件）：UglifyjsWebpackPlugin* 引入webpack：const webpack = require(&apos;webpack&apos;)* 插件中新增配置：new webpack.optimize.UglifyJsPlugin(&#123;sourceMap:true&#125;)* 追加一个配置（与插件同级）：devtool:&apos;source-map&apos;【css扩展前缀】* 使用loader：postcss-loader，执行安装：npm i -D postcss-loader* 在css的loader配置中加入postcss-loader：use: [&quot;css-loader&quot;,&quot;postcss-loader&quot;,&quot;less-loader&quot;]* 在根目录新建postcss.config.js文件，配置如下内容： module.exports = &#123; &quot;plugins&quot;: &#123; &quot;autoprefixer&quot;: &#123; &quot;browsers&quot;: [ &quot;ie &gt;= 8&quot;, &quot;ff &gt;= 30&quot;, &quot;chrome &gt;= 34&quot;, &quot;safari &gt;= 7&quot;, &quot;opera &gt;= 23&quot; ] &#125; &#125; &#125;* 安装所需的autoprefixer，命令：npm i autoprefixer -D【压缩css】* 使用less-plugin-clean-css插件，命令：npm i less-plugin-clean-css -D* 引入插件：const CleanCSSPlugin = require(&quot;less-plugin-clean-css&quot;);* 替换use中的less-loader为对象,如下： loader: &quot;less-loader&quot;, options: &#123; plugins: [ new CleanCSSPlugin(&#123; advanced: true &#125;) ] &#125; 【压缩html】* 将webpack.common.js中的HtmlWebpackPlugin插件复制过来* 追加一个配置项：minify:&#123; removeComments:true, collapseWhitespace:true&#125; ​]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Flex布局]]></title>
    <url>%2F2019%2F07%2F31%2FFlex%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[网页布局（layout）是 CSS 的一个重点应用 布局的传统解决方案，基于盒状模型，依赖 display 属性 + position属性 + float属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。 2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。 Flex 布局将成为未来布局的首选方案。本文介绍它的语法，下一篇文章给出常见布局的 Flex 写法。网友 JailBreak 为本文的所有示例制作了 Demo，也可以参考。 以下内容主要参考了下面两篇文章：A Complete Guide to Flexbox 和 A Visual Guide to CSS3 Flexbox Properties。 一、Flex 布局是什么？Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。 任何一个容器都可以指定为 Flex 布局。 .box{ display: flex; } 行内元素也可以使用 Flex 布局。 .box{ display: inline-flex; } Webkit 内核的浏览器，必须加上-webkit前缀。 .box{ display: -webkit-flex; /* Safari */ display: flex; } 注意，设为 Flex 布局以后，子元素的float、clear和vertical-align属性将失效。 二、基本概念采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。 容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。 项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。 三、容器的属性以下6个属性设置在容器上。 flex-direction flex-wrap flex-flow justify-content align-items align-content 3.1 flex-direction属性flex-direction属性决定主轴的方向（即项目的排列方向）。 .box { flex-direction: row | row-reverse | column | column-reverse; } 它可能有4个值。 row（默认值）：主轴为水平方向，起点在左端。 row-reverse：主轴为水平方向，起点在右端。 column：主轴为垂直方向，起点在上沿。 column-reverse：主轴为垂直方向，起点在下沿。 3.2 flex-wrap属性默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。 .box{ flex-wrap: nowrap | wrap | wrap-reverse; } 它可能取三个值。 （1）nowrap（默认）：不换行。 （2）wrap：换行，第一行在上方。 （3）wrap-reverse：换行，第一行在下方。 3.3 flex-flowflex-flow属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。 .box { flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;; } 3.4 justify-content属性justify-content属性定义了项目在主轴上的对齐方式。 .box { justify-content: flex-start | flex-end | center | space-between | space-around; } 它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。 flex-start（默认值）：左对齐 flex-end：右对齐 center： 居中 space-between：两端对齐，项目之间的间隔都相等。 space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 3.5 align-items属性align-items属性定义项目在交叉轴上如何对齐。 .box { align-items: flex-start | flex-end | center | baseline | stretch; } 它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。 flex-start：交叉轴的起点对齐。 flex-end：交叉轴的终点对齐。 center：交叉轴的中点对齐。 baseline: 项目的第一行文字的基线对齐。 stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 3.6 align-content属性align-content属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。 .box { align-content: flex-start | flex-end | center | space-between | space-around | stretch; } 该属性可能取6个值。 flex-start：与交叉轴的起点对齐。 flex-end：与交叉轴的终点对齐。 center：与交叉轴的中点对齐。 space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。 space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。 stretch（默认值）：轴线占满整个交叉轴。 四、项目的属性以下6个属性设置在项目上。 order flex-grow flex-shrink flex-basis flex align-self 4.1 order属性order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。 .item { order: &lt;integer&gt;; } 4.2 flex-grow属性flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 .item { flex-grow: &lt;number&gt;; /* default 0 */ } 如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。 4.3 flex-shrink属性flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。 .item { flex-shrink: &lt;number&gt;; /* default 1 */ } 如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。 负值对该属性无效。 4.4 flex-basis属性flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。 .item { flex-basis: &lt;length&gt; | auto; /* default auto */ } 它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。 4.5 flex属性flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。 .item { flex: none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ] } 该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。 建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。 4.6 align-self属性align-self属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。 .item { align-self: auto | flex-start | flex-end | center | baseline | stretch; } 该属性可能取6个值，除了auto，其他都与align-items属性完全一致。 （完）]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Grid网格布局]]></title>
    <url>%2F2019%2F07%2F30%2FGrid%E7%BD%91%E6%A0%BC%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[一、概述网格布局（Grid）是最强大的 CSS 布局方案。 它将网页划分成一个个网格，可以任意组合不同的网格，做出各种各样的布局。以前，只能通过复杂的 CSS 框架达到的效果，现在浏览器内置了。 上图这样的布局，就是 Grid 布局的拿手好戏。 Grid 布局与Flex 布局有一定的相似性，都可以指定容器内部多个项目的位置。但是，它们也存在重大区别。 Flex 布局是轴线布局，只能指定”项目”针对轴线的位置，可以看作是一维布局。Grid 布局则是将容器划分成”行”和”列”，产生单元格，然后指定”项目所在”的单元格，可以看作是二维布局。Grid 布局远比 Flex 布局强大。 二、基本概念学习 Grid 布局之前，需要了解一些基本概念。 2.1 容器和项目采用网格布局的区域，称为”容器”（container）。容器内部采用网格定位的子元素，称为”项目”（item）。 &lt;div&gt; &lt;div&gt;&lt;p&gt;1&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;2&lt;/p&gt;&lt;/div&gt; &lt;div&gt;&lt;p&gt;3&lt;/p&gt;&lt;/div&gt; &lt;/div&gt; 上面代码中，最外层的&lt;div&gt;元素就是容器，内层的三个&lt;div&gt;元素就是项目。 注意：项目只能是容器的顶层子元素，不包含项目的子元素，比如上面代码的&lt;p&gt;元素就不是项目。Grid 布局只对项目生效。 2.2 行和列容器里面的水平区域称为”行”（row），垂直区域称为”列”（column）。 上图中，水平的深色区域就是”行”，垂直的深色区域就是”列”。 2.3 单元格行和列的交叉区域，称为”单元格”（cell）。 正常情况下，n行和m列会产生n x m个单元格。比如，3行3列会产生9个单元格。 2.4 网格线划分网格的线，称为”网格线”（grid line）。水平网格线划分出行，垂直网格线划分出列。 正常情况下，n行有n + 1根水平网格线，m列有m + 1根垂直网格线，比如三行就有四根水平网格线。 上图是一个 4 x 4 的网格，共有5根水平网格线和5根垂直网格线。 三、容器属性Grid 布局的属性分成两类。一类定义在容器上面，称为容器属性；另一类定义在项目上面，称为项目属性。这部分先介绍容器属性。 3.1 display 属性display: grid指定一个容器采用网格布局。 div { display: grid; } 上图是display: grid的效果。 默认情况下，容器元素都是块级元素，但也可以设成行内元素。 div { display: inline-grid; } 上面代码指定div是一个行内元素，该元素内部采用网格布局。 上图是display: inline-grid的效果。 注意，设为网格布局以后，容器子元素（项目）的float、display: inline-block、display: table-cell、vertical-align和column-*等设置都将失效。 3.2grid-template-columns 属性，grid-template-rows 属性 容器指定了网格布局以后，接着就要划分行和列。grid-template-columns属性定义每一列的列宽，grid-template-rows属性定义每一行的行高。 .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; } 上面代码指定了一个三行三列的网格，列宽和行高都是100px。 除了使用绝对单位，也可以使用百分比。 .container { display: grid; grid-template-columns: 33.33% 33.33% 33.33%; grid-template-rows: 33.33% 33.33% 33.33%; } （1）repeat() 有时候，重复写同样的值非常麻烦，尤其网格很多时。这时，可以使用repeat()函数，简化重复的值。上面的代码用repeat()改写如下。 .container { display: grid; grid-template-columns: repeat(3, 33.33%); grid-template-rows: repeat(3, 33.33%); } repeat()接受两个参数，第一个参数是重复的次数（上例是3），第二个参数是所要重复的值。 repeat()重复某种模式也是可以的。 grid-template-columns: repeat(2, 100px 20px 80px); 上面代码定义了6列，第一列和第四列的宽度为100px，第二列和第五列为20px，第三列和第六列为80px。 （2）auto-fill 关键字 有时，单元格的大小是固定的，但是容器的大小不确定。如果希望每一行（或每一列）容纳尽可能多的单元格，这时可以使用auto-fill关键字表示自动填充。 .container { display: grid; grid-template-columns: repeat(auto-fill, 100px); } 上面代码表示每列宽度100px，然后自动填充，直到容器不能放置更多的列。 （3）fr 关键字 为了方便表示比例关系，网格布局提供了fr关键字（fraction 的缩写，意为”片段”）。如果两列的宽度分别为1fr和2fr，就表示后者是前者的两倍。 .container { display: grid; grid-template-columns: 1fr 1fr; } 上面代码表示两个相同宽度的列。 fr可以与绝对长度的单位结合使用，这时会非常方便。 .container { display: grid; grid-template-columns: 150px 1fr 2fr; } 上面代码表示，第一列的宽度为150像素，第二列的宽度是第三列的一半。 （4）minmax() minmax()函数产生一个长度范围，表示长度就在这个范围之中。它接受两个参数，分别为最小值和最大值。 grid-template-columns: 1fr 1fr minmax(100px, 1fr); 上面代码中，minmax(100px, 1fr)表示列宽不小于100px，不大于1fr。 （5）auto 关键字 auto关键字表示由浏览器自己决定长度。 grid-template-columns: 100px auto 100px; 上面代码中，第二列的宽度，基本上等于该列单元格的最大宽度，除非单元格内容设置了min-width，且这个值大于最大宽度。 （6）网格线的名称 grid-template-columns属性和grid-template-rows属性里面，还可以使用方括号，指定每一根网格线的名字，方便以后的引用。 .container { display: grid; grid-template-columns: [c1] 100px [c2] 100px [c3] auto [c4]; grid-template-rows: [r1] 100px [r2] 100px [r3] auto [r4]; } 上面代码指定网格布局为3行 x 3列，因此有4根垂直网格线和4根水平网格线。方括号里面依次是这八根线的名字。 网格布局允许同一根线有多个名字，比如[fifth-line row-5]。 （7）布局实例 grid-template-columns属性对于网页布局非常有用。两栏式布局只需要一行代码。 .wrapper { display: grid; grid-template-columns: 70% 30%; } 上面代码将左边栏设为70%，右边栏设为30%。 传统的十二网格布局，写起来也很容易。 grid-template-columns: repeat(12, 1fr); 3.3grid-row-gap 属性，grid-column-gap 属性，grid-gap 属性 grid-row-gap属性设置行与行的间隔（行间距），grid-column-gap属性设置列与列的间隔（列间距）。 .container { grid-row-gap: 20px; grid-column-gap: 20px; } 上面代码中，grid-row-gap用于设置行间距，grid-column-gap用于设置列间距。 grid-gap属性是grid-column-gap和grid-row-gap的合并简写形式，语法如下。 grid-gap: &lt;grid-row-gap&gt; &lt;grid-column-gap&gt;; 因此，上面一段 CSS 代码等同于下面的代码。 .container { grid-gap: 20px 20px; } 如果grid-gap省略了第二个值，浏览器认为第二个值等于第一个值。 根据最新标准，上面三个属性名的grid-前缀已经删除，grid-column-gap和grid-row-gap写成column-gap和row-gap，grid-gap写成gap。 3.4 grid-template-areas 属性网格布局允许指定”区域”（area），一个区域由单个或多个单元格组成。grid-template-areas属性用于定义区域。 .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-template-areas: &apos;a b c&apos; &apos;d e f&apos; &apos;g h i&apos;; } 上面代码先划分出9个单元格，然后将其定名为a到i的九个区域，分别对应这九个单元格。 多个单元格合并成一个区域的写法如下。 grid-template-areas: &apos;a a a&apos; &apos;b b b&apos; &apos;c c c&apos;; 上面代码将9个单元格分成a、b、c三个区域。 下面是一个布局实例。 grid-template-areas: &quot;header header header&quot; &quot;main main sidebar&quot; &quot;footer footer footer&quot;; 上面代码中，顶部是页眉区域header，底部是页脚区域footer，中间部分则为main和sidebar。 如果某些区域不需要利用，则使用”点”（.）表示。 grid-template-areas: &apos;a . c&apos; &apos;d . f&apos; &apos;g . i&apos;; 上面代码中，中间一列为点，表示没有用到该单元格，或者该单元格不属于任何区域。 注意，区域的命名会影响到网格线。每个区域的起始网格线，会自动命名为区域名-start，终止网格线自动命名为区域名-end。 比如，区域名为header，则起始位置的水平网格线和垂直网格线叫做header-start，终止位置的水平网格线和垂直网格线叫做header-end。 3.5 grid-auto-flow 属性划分网格以后，容器的子元素会按照顺序，自动放置在每一个网格。默认的放置顺序是”先行后列”，即先填满第一行，再开始放入第二行，即下图数字的顺序。 这个顺序由grid-auto-flow属性决定，默认值是row，即”先行后列”。也可以将它设成column，变成”先列后行”。 grid-auto-flow: column; 上面代码设置了column以后，放置顺序就变成了下图。 grid-auto-flow属性除了设置成row和column，还可以设成row dense和column dense。这两个值主要用于，某些项目指定位置以后，剩下的项目怎么自动放置。 下面的例子让1号项目和2号项目各占据两个单元格，然后在默认的grid-auto-flow: row情况下，会产生下面这样的布局。 上图中，1号项目后面的位置是空的，这是因为3号项目默认跟着2号项目，所以会排在2号项目后面。 现在修改设置，设为row dense，表示”先行后列”，并且尽可能紧密填满，尽量不出现空格。 grid-auto-flow: row dense; 上面代码的效果如下。 上图会先填满第一行，再填满第二行，所以3号项目就会紧跟在1号项目的后面。8号项目和9号项目就会排到第四行。 如果将设置改为column dense，表示”先列后行”，并且尽量填满空格。 grid-auto-flow: column dense; 上面代码的效果如下。 上图会先填满第一列，再填满第2列，所以3号项目在第一列，4号项目在第二列。8号项目和9号项目被挤到了第四列。 3.6justify-items 属性，align-items 属性，place-items 属性 justify-items属性设置单元格内容的水平位置（左中右），align-items属性设置单元格内容的垂直位置（上中下）。 .container { justify-items: start | end | center | stretch; align-items: start | end | center | stretch; } 这两个属性的写法完全相同，都可以取下面这些值。 start：对齐单元格的起始边缘。 end：对齐单元格的结束边缘。 center：单元格内部居中。 stretch：拉伸，占满单元格的整个宽度（默认值）。 .container { justify-items: start; } 上面代码表示，单元格的内容左对齐，效果如下图。 .container { align-items: start; } 上面代码表示，单元格的内容头部对齐，效果如下图。 place-items属性是align-items属性和justify-items属性的合并简写形式。 place-items: &lt;align-items&gt; &lt;justify-items&gt;; 下面是一个例子。 place-items: start end; 如果省略第二个值，则浏览器认为与第一个值相等。 3.7justify-content 属性，align-content 属性，place-content 属性 justify-content属性是整个内容区域在容器里面的水平位置（左中右），align-content属性是整个内容区域的垂直位置（上中下）。 .container { justify-content: start | end | center | stretch | space-around | space-between | space-evenly; align-content: start | end | center | stretch | space-around | space-between | space-evenly; } 这两个属性的写法完全相同，都可以取下面这些值。（下面的图都以justify-content属性为例，align-content属性的图完全一样，只是将水平方向改成垂直方向。） start - 对齐容器的起始边框。 end - 对齐容器的结束边框。 center - 容器内部居中。 stretch - 项目大小没有指定时，拉伸占据整个网格容器。 space-around - 每个项目两侧的间隔相等。所以，项目之间的间隔比项目与容器边框的间隔大一倍。 space-between - 项目与项目的间隔相等，项目与容器边框之间没有间隔。 space-evenly - 项目与项目的间隔相等，项目与容器边框之间也是同样长度的间隔。 place-content属性是align-content属性和justify-content属性的合并简写形式。 place-content: &lt;align-content&gt; &lt;justify-content&gt; 下面是一个例子。 place-content: space-around space-evenly; 如果省略第二个值，浏览器就会假定第二个值等于第一个值。 3.8grid-auto-columns 属性，grid-auto-rows 属性 有时候，一些项目的指定位置，在现有网格的外部。比如网格只有3列，但是某一个项目指定在第5行。这时，浏览器会自动生成多余的网格，以便放置项目。 grid-auto-columns属性和grid-auto-rows属性用来设置，浏览器自动创建的多余网格的列宽和行高。它们的写法与grid-template-columns和grid-template-rows完全相同。如果不指定这两个属性，浏览器完全根据单元格内容的大小，决定新增网格的列宽和行高。 下面的例子里面，划分好的网格是3行 x 3列，但是，8号项目指定在第4行，9号项目指定在第5行。 .container { display: grid; grid-template-columns: 100px 100px 100px; grid-template-rows: 100px 100px 100px; grid-auto-rows: 50px; } 上面代码指定新增的行高统一为50px（原始的行高为100px）。 3.9grid-template 属性，grid 属性 grid-template属性是grid-template-columns、grid-template-rows和grid-template-areas这三个属性的合并简写形式。 grid属性是grid-template-rows、grid-template-columns、grid-template-areas、 grid-auto-rows、grid-auto-columns、grid-auto-flow这六个属性的合并简写形式。 从易读易写的角度考虑，还是建议不要合并属性，所以这里就不详细介绍这两个属性了。 四、项目属性下面这些属性定义在项目上面。 4.1grid-column-start 属性，grid-column-end 属性，grid-row-start 属性，grid-row-end 属性 项目的位置是可以指定的，具体方法就是指定项目的四个边框，分别定位在哪根网格线。 grid-column-start属性：左边框所在的垂直网格线 grid-column-end属性：右边框所在的垂直网格线 grid-row-start属性：上边框所在的水平网格线 grid-row-end属性：下边框所在的水平网格线 .item-1 { grid-column-start: 2; grid-column-end: 4; } 上面代码指定，1号项目的左边框是第二根垂直网格线，右边框是第四根垂直网格线。 上图中，只指定了1号项目的左右边框，没有指定上下边框，所以会采用默认位置，即上边框是第一根水平网格线，下边框是第二根水平网格线。 除了1号项目以外，其他项目都没有指定位置，由浏览器自动布局，这时它们的位置由容器的grid-auto-flow属性决定，这个属性的默认值是row，因此会”先行后列”进行排列。读者可以把这个属性的值分别改成column、row dense和column dense，看看其他项目的位置发生了怎样的变化。 下面的例子是指定四个边框位置的效果。 .item-1 { grid-column-start: 1; grid-column-end: 3; grid-row-start: 2; grid-row-end: 4; } 这四个属性的值，除了指定为第几个网格线，还可以指定为网格线的名字。 .item-1 { grid-column-start: header-start; grid-column-end: header-end; } 上面代码中，左边框和右边框的位置，都指定为网格线的名字。 这四个属性的值还可以使用span关键字，表示”跨越”，即左右边框（上下边框）之间跨越多少个网格。 .item-1 { grid-column-start: span 2; } 上面代码表示，1号项目的左边框距离右边框跨越2个网格。 这与下面的代码效果完全一样。 .item-1 { grid-column-end: span 2; } 使用这四个属性，如果产生了项目的重叠，则使用z-index属性指定项目的重叠顺序。 4.2grid-column 属性，grid-row 属性 grid-column属性是grid-column-start和grid-column-end的合并简写形式，grid-row属性是grid-row-start属性和grid-row-end的合并简写形式。 .item { grid-column: / ; grid-row: / ; } 下面是一个例子。 .item-1 { grid-column: 1 / 3; grid-row: 1 / 2; } /* 等同于 */ .item-1 { grid-column-start: 1; grid-column-end: 3; grid-row-start: 1; grid-row-end: 2; } 上面代码中，项目item-1占据第一行，从第一根列线到第三根列线。 这两个属性之中，也可以使用span关键字，表示跨越多少个网格。 .item-1 { background: #b03532; grid-column: 1 / 3; grid-row: 1 / 3; } /* 等同于 */ .item-1 { background: #b03532; grid-column: 1 / span 2; grid-row: 1 / span 2; } 上面代码中，项目item-1占据的区域，包括第一行 + 第二行、第一列 + 第二列。 斜杠以及后面的部分可以省略，默认跨越一个网格。 .item-1 { grid-column: 1; grid-row: 1; } 上面代码中，项目item-1占据左上角第一个网格。 4.3 grid-area 属性grid-area属性指定项目放在哪一个区域。 .item-1 { grid-area: e; } 上面代码中，1号项目位于e区域，效果如下图。 grid-area属性还可用作grid-row-start、grid-column-start、grid-row-end、grid-column-end的合并简写形式，直接指定项目的位置。 .item { grid-area: &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;; } 下面是一个例子。 .item-1 { grid-area: 1 / 1 / 3 / 3; } 4.4justify-self 属性，align-self 属性，place-self 属性 justify-self属性设置单元格内容的水平位置（左中右），跟justify-items属性的用法完全一致，但只作用于单个项目。 align-self属性设置单元格内容的垂直位置（上中下），跟align-items属性的用法完全一致，也是只作用于单个项目。 .item { justify-self: start | end | center | stretch; align-self: start | end | center | stretch; } 这两个属性都可以取下面四个值。 start：对齐单元格的起始边缘。 end：对齐单元格的结束边缘。 center：单元格内部居中。 stretch：拉伸，占满单元格的整个宽度（默认值）。 下面是justify-self: start的例子。 .item-1 { justify-self: start; } place-self属性是align-self属性和justify-self属性的合并简写形式。 place-self: &lt;align-self&gt; &lt;justify-self&gt;; 下面是一个例子。 place-self: center center; 如果省略第二个值，place-self属性会认为这两个值相等。 五、参考链接 A Complete Guide to Grid, by Chris House Understanding the CSS Grid Layout Module, by Ian Yates How to Build an Off-Canvas Navigation With CSS Grid, Ian Yates Introduction to the CSS Grid Layout With Examples, Dogacan Bilgili Learn CSS Grid, Jonathan Suh How I stopped using Bootstrap’s layout thanks to CSS Grid, Cédric Kui （完）]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Css</tag>
        <tag>布局</tag>
      </tags>
  </entry>
</search>
